syntax = "proto3";

package gofoundationv2.v1.example.payment;

option go_package = "gofoundationv2/v1/example;payment";

import "google/api/annotations.proto";
import "gofoundationv2/v1/gofoundationv2.proto";
import "gofoundationv2/v1/example/payment/payment.proto";

// PaymentService defines an example service
service PaymentService {
  // CreatePayment to Create a new payment
  rpc CreatePayment(CreatePaymentRequest) returns (PaymentResponse) {
    option (google.api.http) = {
      post: "/v1/payments"
      body: "*"
    };
  }

  // GetPayment to Get a payment by ID
  rpc GetPayment(GetPaymentRequest) returns (PaymentResponse) {
    option (google.api.http) = {
      get: "/v1/payments/{id}"
    };
  }

  // UpdatePayment to Update an existing payment
  rpc UpdatePayment(UpdatePaymentRequest) returns (PaymentResponse) {
    option (google.api.http) = {
      put: "/v1/payments/{id}"
      body: "*"
    };
  }

  // DeletePayment to Delete a payment by ID
  rpc DeletePayment(DeletePaymentRequest) returns (DeletePaymentResponse) {
    option (google.api.http) = {
      delete: "/v1/payments/{id}"
    };
  }

  // ListPayments to List all payments
  rpc ListPayments(ListPaymentsRequest) returns (ListPaymentsResponse) {
    option (google.api.http) = {
      get: "/v1/payments"
    };
  }
}

// CreatePaymentRequest message for creating a payment
message CreatePaymentRequest {
  // reference_id for the payment
  string reference_id = 1;
  // amount to be paid in the smallest unit of the currency (e.g., cents, paisa)
  int64 amount = 2;
  // currency code (e.g., USD, INR)
  string currency = 3;
  // description of the payment
  string description = 4;
  // payer details
  Payer payer = 5;
  // payee details
  Payee payee = 6;
}

// GetPaymentRequest message for getting a payment
message GetPaymentRequest {
  // id of the payment
  string id = 1;
}

// UpdatePaymentRequest message for updating a payment
message UpdatePaymentRequest {
  // id of the payment
  string id = 1;
  // reference_id for the payment
  string reference_id = 2;
  // amount to be paid in the smallest unit of the currency (e.g., cents, paisa)
  int64 amount = 3;
  // currency code (e.g., USD, INR)
  string currency = 4;
  // description of the payment
  string description = 5;
  // status of the payment (e.g., created, approved, failed)
  string status = 6;
  // payer details
  Payer payer = 7;
  // payee details
  Payee payee = 8;
}

// DeletePaymentRequest message for deleting a payment
message DeletePaymentRequest {
  // id of the payment
  string id = 1;
}

// DeletePaymentResponse message for deleting a payment
message DeletePaymentResponse {
  // id of the payment
  string id = 1;
  // error block
  gofoundationv2.v1.Error error = 4;
}

// ListPaymentsRequest message for listing payments
message ListPaymentsRequest {
  // reference_id
  string reference_id = 1;
  // status
  string status = 2;
  // count
  int64 count = 3;
}

// ListPaymentsResponse message for listing payments
message ListPaymentsResponse {
  // entity i.e. collection
  string entity = 1;
  // count is the number of payments (items)
  int64 count = 2;
  // payments has list of payments
  repeated Payment payments = 3;
  // error block
  gofoundationv2.v1.Error error = 4;
}

// PaymentResponse message for payment operations
message PaymentResponse {
  // id of the payment
  string id = 1;
  // reference_id for the payment
  string reference_id = 2;
  // amount to be paid in the smallest unit of the currency (e.g., cents, paisa)
  int64 amount = 3;
  // currency code (e.g., USD, INR)
  string currency = 4;
  // description of the payment
  string description = 5;
  // status of the payment (e.g., created, approved, failed)
  string status = 6;
  // payer details
  Payer payer = 7;
  // payee details
  Payee payee = 8;
  // created_at is the Timestamp when the payment was created
  int64 created_at = 9;
  // updated_at is the Timestamp when the payment was last updated
  int64 updated_at = 10;
  // error block
  gofoundationv2.v1.Error error = 11;
}
